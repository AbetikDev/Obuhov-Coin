// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ

// –Ü–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥)
let autoUpdateInterval = null;

document.addEventListener('DOMContentLoaded', async () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const isAuthorized = await requireAdmin();
    if (!isAuthorized) return;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    await loadAdminData();
    await loadUsersTable();
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    startAutoUpdate();
});

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
function startAutoUpdate() {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    autoUpdateInterval = setInterval(async () => {
        await loadStats();
        await loadUsersTable();
    }, 15000);
}

// –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
function stopAutoUpdate() {
    if (autoUpdateInterval) {
        clearInterval(autoUpdateInterval);
        autoUpdateInterval = null;
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function loadAdminData() {
    const currentUser = await getCurrentUser();
    if (currentUser) {
        const adminNameElement = document.getElementById('admin-name');
        if (adminNameElement) {
            adminNameElement.textContent = currentUser.username;
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loadStats();
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ API
        const usersArray = await API.getAllUsers();
        
        // –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å –∑ API
        const rateElement = document.getElementById('admin-rate');
        if (rateElement) {
            const rate = await API.getExchangeRate();
            rateElement.textContent = '$' + rate.toFixed(2);
            
            // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            rateElement.style.color = '#4caf50';
            rateElement.style.textShadow = '0 0 10px #4caf50';
            setTimeout(() => {
                rateElement.style.color = '';
                rateElement.style.textShadow = '';
            }, 1000);
        }
        
        // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        const totalUsersElement = document.getElementById('total-users');
        if (totalUsersElement) {
            totalUsersElement.textContent = usersArray.length;
        }

        // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç
        const totalCoins = usersArray.reduce((sum, user) => sum + (user.coins || 0) + (user.frozenCoins || 0), 0);
        const totalCoinsElement = document.getElementById('total-coins');
        if (totalCoinsElement) {
            totalCoinsElement.textContent = totalCoins.toFixed(2);
        }

        // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å USD
        const totalUsd = usersArray.reduce((sum, user) => sum + (user.usd || 0) + (user.frozenUSD || 0), 0);
        const totalUsdElement = document.getElementById('total-usd');
        if (totalUsdElement) {
            totalUsdElement.textContent = '$' + totalUsd.toFixed(2);
        }

        // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–ø–æ–∫–∏ —â–æ –∑ localStorage, —è–∫—â–æ —î API - —Ç—Ä–µ–±–∞ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏)
        const transactions = JSON.parse(localStorage.getItem('transactions')) || [];
        const totalTransactionsElement = document.getElementById('total-transactions');
        if (totalTransactionsElement) {
            totalTransactionsElement.textContent = transactions.length;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ API
        await checkAPIStatus();
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É API
async function checkAPIStatus() {
    try {
        const isConnected = await API.checkConnection();
        const statusElement = document.getElementById('api-status');
        
        if (statusElement) {
            if (isConnected) {
                statusElement.textContent = '‚óè API Connected';
                statusElement.style.color = '#4caf50';
            } else {
                statusElement.textContent = '‚óè API Disconnected';
                statusElement.style.color = '#ff6b6b';
            }
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ API:', error);
        const statusElement = document.getElementById('api-status');
        if (statusElement) {
            statusElement.textContent = '‚óè API Error';
            statusElement.style.color = '#ff6b6b';
        }
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç–∏
async function updateRate() {
    const newRate = document.getElementById('new-rate').value;
    
    if (!newRate || parseFloat(newRate) <= 0) {
        alert('‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∫—É—Ä—Å!');
        return;
    }
    
    try {
        const result = await API.updateExchangeRate(parseFloat(newRate));
        
        if (result.success) {
            alert(`‚úÖ –ö—É—Ä—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $${parseFloat(newRate).toFixed(2)}!`);
            document.getElementById('new-rate').value = '';
            await loadStats();
            
            // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –ø—Ä–æ –∑–º—ñ–Ω—É –∫—É—Ä—Å—É
            await API.addTransaction({
                type: 'rate_change',
                fromUser: 'admin',
                toUser: 'system',
                coins: 0,
                usd: 0,
                fee: 0,
                description: `–ê–¥–º—ñ–Ω –∑–º—ñ–Ω–∏–≤ –∫—É—Ä—Å –Ω–∞ $${parseFloat(newRate).toFixed(2)} –∑–∞ 1 OBUHOV`,
                timestamp: new Date().toISOString()
            });
        } else {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É: ' + (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É!');
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function loadUsersTable() {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ API
        const usersArray = await API.getAllUsers();
        const tbody = document.getElementById('users-table-body');
        
        if (!tbody) return;

        tbody.innerHTML = '';

        usersArray.forEach(user => {
            const row = createUserRow(user);
            tbody.appendChild(row);
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
        const tbody = document.getElementById('users-table-body');
        if (tbody) {
            tbody.innerHTML = '<tr><td colspan="7" style="text-align: center; color: #ff6b6b;">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</td></tr>';
        }
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function createUserRow(user) {
    const tr = document.createElement('tr');
    tr.dataset.username = user.username;
    
    const date = new Date(user.registeredAt);
    const formattedDate = formatDate(date);
    
    tr.innerHTML = `
        <td>
            <img src="assets/images/icons/logo-maga.png" alt="${user.username}" class="user-avatar">
        </td>
        <td>${user.username}</td>
        <td>
            <span class="user-role ${user.isAdmin ? 'role-admin' : 'role-user'}">
                ${user.isAdmin ? 'üëë –ê–¥–º—ñ–Ω' : 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}
            </span>
        </td>
        <td>
            <span class="coin-badge">
                <img src="assets/images/icons/logo-2d.png" alt="coin" class="coin-icon-small">
                ${(user.coins || 0).toFixed(2)}
            </span>
            ${user.frozenCoins > 0 ? `<div class="frozen-info">üîí ${user.frozenCoins.toFixed(2)}</div>` : ''}
        </td>
        <td>
            <span class="usd-badge">
                üíµ $${(user.usd || 0).toFixed(2)}
            </span>
            ${user.frozenUSD > 0 ? `<div class="frozen-info">üîí $${user.frozenUSD.toFixed(2)}</div>` : ''}
        </td>
        <td>${formattedDate}</td>
        <td>
            <div class="action-buttons">
                <button class="btn-small btn-edit" onclick="editUser('${user.username}')">
                    ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
                <button class="btn-small btn-delete" onclick="deleteUser('${user.username}')" ${user.isAdmin ? 'disabled title="–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"' : ''}>
                    üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
            </div>
        </td>
    `;
    
    return tr;
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏
function formatDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}

// –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
function filterUsers() {
    const searchInput = document.getElementById('search-input');
    const filter = searchInput.value.toLowerCase();
    const rows = document.querySelectorAll('#users-table-body tr');
    
    rows.forEach(row => {
        const username = row.dataset.username.toLowerCase();
        if (username.includes(filter)) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}

// –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function editUser(username) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ API
        const user = await API.getUser(username);
        
        if (!user) {
            alert('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }

        // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
        document.getElementById('edit-username').value = username;
        document.getElementById('edit-coins').value = (user.coins || 0).toFixed(2);
        document.getElementById('edit-usd').value = (user.usd || 0).toFixed(2);
        document.getElementById('edit-role').value = user.isAdmin ? 'true' : 'false';

        // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        const modal = document.getElementById('edit-modal');
        if (modal) {
            modal.classList.add('active');
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
function closeEditModal() {
    const modal = document.getElementById('edit-modal');
    if (modal) {
        modal.classList.remove('active');
    }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function saveUserChanges(event) {
    event.preventDefault();
    
    const username = document.getElementById('edit-username').value;
    const coins = parseFloat(document.getElementById('edit-coins').value);
    const usd = parseFloat(document.getElementById('edit-usd').value);
    const isAdmin = document.getElementById('edit-role').value === 'true';
    
    try {
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ API
        const result = await API.updateUser(username, {
            coins: coins,
            usd: usd,
            isAdmin: isAdmin
        });
        
        if (!result.success) {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
            return;
        }
        
        // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ –∞–¥–º—ñ–Ω–æ–º
        logTransaction({
            type: 'admin_edit',
            from: 'admin',
            to: username,
            coins: coins,
            usd: usd,
            timestamp: new Date().toISOString(),
            description: `–ê–¥–º—ñ–Ω –æ–Ω–æ–≤–∏–≤ –±–∞–ª–∞–Ω—Å ${username}: ${coins.toFixed(2)} OBUHOV, $${usd.toFixed(2)}`
        });
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        await loadStats();
        await loadUsersTable();
        closeEditModal();
        
        // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        alert(`‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!`);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω');
    }
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function deleteUser(username) {
    try {
        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        const user = await API.getUser(username);
        
        if (!user) {
            alert('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }

        if (user.isAdmin) {
            alert('‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!');
            return;
        }

        // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if (!confirm(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}"?`)) {
            return;
        }

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ API
        const result = await API.deleteUser(username);
        
        if (!result.success) {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
            return;
        }
        
        // –Ø–∫—â–æ —Ü–µ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á - –≤–∏–π—Ç–∏
        const currentUsername = localStorage.getItem('currentUser');
        if (currentUsername === username) {
            localStorage.removeItem('currentUser');
            window.location.href = 'index.html';
            return;
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
        await loadStats();
        await loadUsersTable();
        
        alert(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "${username}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!`);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
    }
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
async function addCoins(username, amount) {
    try {
        const user = await API.getUser(username);
        if (!user) return;

        const newCoins = (user.coins || 0) + amount;
        const result = await API.updateUser(username, { coins: newCoins });
        
        if (result.success) {
            await loadStats();
            await loadUsersTable();
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–Ω–µ—Ç:', error);
    }
}

// –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –º–æ–Ω–µ—Ç —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function removeCoins(username, amount) {
    try {
        const user = await API.getUser(username);
        if (!user) return;

        const newCoins = Math.max(0, (user.coins || 0) - amount);
        const result = await API.updateUser(username, { coins: newCoins });
        
        if (result.success) {
            await loadStats();
            await loadUsersTable();
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –º–æ–Ω–µ—Ç:', error);
    }
}
