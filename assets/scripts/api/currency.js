// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∞–ª—é—Ç–∞–º–∏ —Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç–∏ (—Ç–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞, –≤—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ)
function initializeCurrency() {
    console.log('‚úÖ Currency —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è API)');
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—É—Ä—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–∞
async function getExchangeRate() {
    const rate = await API.getExchangeRate();
    return rate || 2.65;
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)
async function setExchangeRate(newRate) {
    const admin = await isAdmin();
    if (!admin) {
        alert('‚ùå –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∫—É—Ä—Å!');
        return false;
    }
    
    const rate = parseFloat(newRate);
    if (isNaN(rate) || rate <= 0) {
        alert('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏!');
        return false;
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É —á–µ—Ä–µ–∑ API
    const result = await API.updateExchangeRate(rate);
    
    if (!result.success) {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É: ' + result.error);
        return false;
    }
    
    // –ó–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω–∏ –∫—É—Ä—Å—É
    await logTransaction({
        type: 'rate_change',
        fromUser: 'admin',
        toUser: 'system',
        coins: 0,
        usd: 0,
        fee: 0,
        description: `–ö—É—Ä—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ $${rate.toFixed(2)} –∑–∞ 1 OBUHOV`
    });
    
    return true;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è OBUHOV –≤ USD
async function coinsToUSD(coins) {
    const rate = await getExchangeRate();
    return coins * rate;
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è USD –≤ OBUHOV
async function usdToCoins(usd) {
    const rate = await getExchangeRate();
    return usd / rate;
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function getUserBalance(username) {
    const user = await API.getUser(username);
    
    if (!user) return null;
    
    return {
        coins: user.coins || 0,
        usd: user.usd || 0,
        frozenCoins: user.frozenCoins || 0,
        frozenUSD: user.frozenUSD || 0
    };
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function updateUserBalance(username, coins, usd) {
    const user = await API.getUser(username);
    if (!user) return false;
    
    const result = await API.updateUser(username, {
        coins: parseFloat(coins) || 0,
        usd: parseFloat(usd) || 0,
        frozenCoins: user.frozenCoins || 0,
        frozenUSD: user.frozenUSD || 0,
        isAdmin: user.isAdmin
    });
    
    return result.success;
}

// –ü–µ—Ä–µ–∫–∞–∑ –º–æ–Ω–µ—Ç –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
async function transferCoins(fromUsername, toUsername, amount, note = '') {
    const fromUser = await API.getUser(fromUsername);
    const toUser = await API.getUser(toUsername);
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!fromUser || !toUser) {
        return { success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    if (fromUsername === toUsername) {
        return { success: false, message: '–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ —Å–∞–º–æ–º—É —Å–æ–±—ñ!' };
    }
    
    const transferAmount = parseFloat(amount);
    if (isNaN(transferAmount) || transferAmount <= 0) {
        return { success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É!' };
    }
    
    if (fromUser.coins < transferAmount) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ!' };
    }
    
    // –ö–æ–º—ñ—Å—ñ—è 1%
    const fee = transferAmount * 0.01;
    const receivedAmount = transferAmount - fee;
    
    // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É
    await API.updateUser(fromUsername, {
        coins: fromUser.coins - transferAmount,
        usd: fromUser.usd,
        frozenCoins: fromUser.frozenCoins || 0,
        frozenUSD: fromUser.frozenUSD || 0,
        isAdmin: fromUser.isAdmin
    });
    
    await API.updateUser(toUsername, {
        coins: toUser.coins + receivedAmount,
        usd: toUser.usd,
        frozenCoins: toUser.frozenCoins || 0,
        frozenUSD: toUser.frozenUSD || 0,
        isAdmin: toUser.isAdmin
    });
    
    // –ó–∞–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    await logTransaction({
        type: 'transfer',
        fromUser: fromUsername,
        toUser: toUsername,
        coins: transferAmount,
        usd: 0,
        fee: fee,
        description: `–ü–µ—Ä–µ–∫–∞–∑ ${transferAmount.toFixed(2)} OBUHOV –≤—ñ–¥ ${fromUsername} –¥–æ ${toUsername}${note ? '\n–ü—Ä–∏–º—ñ—Ç–∫–∞: ' + note : ''}`
    });
    
    return {
        success: true,
        message: `‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∫–∞–∑–∞–Ω–æ ${transferAmount.toFixed(2)} OBUHOV\nüí∞ –û—Ç—Ä–∏–º—É–≤–∞—á –æ—Ç—Ä–∏–º–∞—î: ${receivedAmount.toFixed(2)} OBUHOV\nüí∏ –ö–æ–º—ñ—Å—ñ—è: ${fee.toFixed(2)} OBUHOV (1%)`,
        fee: fee,
        received: receivedAmount
    };
}

// –ö—É–ø—ñ–≤–ª—è OBUHOV –∑–∞ USD
async function buyCoins(username, usdAmount) {
    const user = await API.getUser(username);
    
    if (!user) {
        return { success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    const amount = parseFloat(usdAmount);
    if (isNaN(amount) || amount <= 0) {
        return { success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞!' };
    }
    
    if (user.usd < amount) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USD –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ!' };
    }
    
    const rate = await getExchangeRate();
    const coinsAmount = amount / rate;
    
    // –ö–æ–º—ñ—Å—ñ—è 0.5%
    const fee = coinsAmount * 0.005;
    const receivedCoins = coinsAmount - fee;
    
    // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏
    await API.updateUser(username, {
        coins: user.coins + receivedCoins,
        usd: user.usd - amount,
        frozenCoins: user.frozenCoins || 0,
        frozenUSD: user.frozenUSD || 0,
        isAdmin: user.isAdmin
    });
    
    // –ó–∞–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    await logTransaction({
        type: 'buy',
        fromUser: username,
        toUser: 'system',
        coins: receivedCoins,
        usd: amount,
        fee: fee,
        description: `–ö—É–ø—ñ–≤–ª—è ${receivedCoins.toFixed(2)} OBUHOV –∑–∞ $${amount.toFixed(2)} (–∫—É—Ä—Å: $${rate.toFixed(2)})`
    });
    
    return {
        success: true,
        message: `‚úÖ –£—Å–ø—ñ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${receivedCoins.toFixed(2)} OBUHOV\nüíµ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: $${amount.toFixed(2)}\nüí∏ –ö–æ–º—ñ—Å—ñ—è: ${fee.toFixed(4)} OBUHOV (0.5%)`,
        coins: receivedCoins,
        fee: fee
    };
}

// –ü—Ä–æ–¥–∞–∂ OBUHOV –∑–∞ USD
async function sellCoins(username, coinsAmount) {
    const user = await API.getUser(username);
    
    if (!user) {
        return { success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    const amount = parseFloat(coinsAmount);
    if (isNaN(amount) || amount <= 0) {
        return { success: false, message: '–ù–µ–≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–æ–Ω–µ—Ç!' };
    }
    
    if (user.coins < amount) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ OBUHOV –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ!' };
    }
    
    const rate = await getExchangeRate();
    const usdAmount = amount * rate;
    
    // –ö–æ–º—ñ—Å—ñ—è 0.5%
    const fee = usdAmount * 0.005;
    const receivedUSD = usdAmount - fee;
    
    // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
    await API.updateUser(username, {
        coins: user.coins - amount,
        usd: user.usd + receivedUSD,
        frozenCoins: user.frozenCoins || 0,
        frozenUSD: user.frozenUSD || 0,
        isAdmin: user.isAdmin
    });
    
    // –ó–∞–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    await logTransaction({
        type: 'sell',
        fromUser: username,
        toUser: 'system',
        coins: amount,
        usd: receivedUSD,
        fee: fee,
        description: `–ü—Ä–æ–¥–∞–∂ ${amount.toFixed(2)} OBUHOV –∑–∞ $${receivedUSD.toFixed(2)} (–∫—É—Ä—Å: $${rate.toFixed(2)})`
    });
    
    return {
        success: true,
        message: `‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ ${amount.toFixed(2)} OBUHOV\nüíµ –û—Ç—Ä–∏–º–∞–Ω–æ: $${receivedUSD.toFixed(2)}\nüí∏ –ö–æ–º—ñ—Å—ñ—è: $${fee.toFixed(2)} (0.5%)`,
        usd: receivedUSD,
        fee: fee
    };
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É –Ω–∞ –∫—É–ø—ñ–≤–ª—é
async function createBuyOrder(username, coinsAmount, pricePerCoin) {
    const user = await API.getUser(username);
    
    if (!user) {
        return { success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    const coins = parseFloat(coinsAmount);
    const price = parseFloat(pricePerCoin);
    
    if (isNaN(coins) || coins <= 0 || isNaN(price) || price <= 0) {
        return { success: false, message: '–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ä–¥–µ—Ä—É!' };
    }
    
    const totalCost = coins * price;
    
    if (user.usd < totalCost) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USD –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É!' };
    }
    
    // –ó–∞–º–æ—Ä–æ–∑–∏—Ç–∏ USD
    await API.updateUser(username, {
        coins: user.coins,
        usd: user.usd - totalCost,
        frozenCoins: user.frozenCoins || 0,
        frozenUSD: (user.frozenUSD || 0) + totalCost,
        isAdmin: user.isAdmin
    });
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É —á–µ—Ä–µ–∑ API
    const result = await API.createOrder({
        username: username,
        type: 'buy',
        coins: coins,
        pricePerCoin: price,
        status: 'active'
    });
    
    if (!result.success) {
        return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É!' };
    }
    
    // –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    await tryMatchOrders();
    
    return {
        success: true,
        message: `‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –∫—É–ø—ñ–≤–ª—é —Å—Ç–≤–æ—Ä–µ–Ω–æ!\nüí∞ ${coins.toFixed(2)} OBUHOV –ø–æ $${price.toFixed(2)}\nüíµ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: $${totalCost.toFixed(2)}`,
        orderId: result.orderId
    };
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É –Ω–∞ –ø—Ä–æ–¥–∞–∂
async function createSellOrder(username, coinsAmount, pricePerCoin) {
    const user = await API.getUser(username);
    
    if (!user) {
        return { success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    const coins = parseFloat(coinsAmount);
    const price = parseFloat(pricePerCoin);
    
    if (isNaN(coins) || coins <= 0 || isNaN(price) || price <= 0) {
        return { success: false, message: '–ù–µ–≤—ñ—Ä–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –æ—Ä–¥–µ—Ä—É!' };
    }
    
    if (user.coins < coins) {
        return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ OBUHOV –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É!' };
    }
    
    // –ó–∞–º–æ—Ä–æ–∑–∏—Ç–∏ OBUHOV
    await API.updateUser(username, {
        coins: user.coins - coins,
        usd: user.usd,
        frozenCoins: (user.frozenCoins || 0) + coins,
        frozenUSD: user.frozenUSD || 0,
        isAdmin: user.isAdmin
    });
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É —á–µ—Ä–µ–∑ API
    const result = await API.createOrder({
        username: username,
        type: 'sell',
        coins: coins,
        pricePerCoin: price,
        status: 'active'
    });
    
    if (!result.success) {
        return { success: false, message: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—É!' };
    }
    
    // –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    await tryMatchOrders();
    
    return {
        success: true,
        message: `‚úÖ –û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\nüí∞ ${coins.toFixed(2)} OBUHOV –ø–æ $${price.toFixed(2)}\nüîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: ${coins.toFixed(2)} OBUHOV`,
        orderId: result.orderId
    };
}

// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä—É
async function cancelOrder(username, orderId, orderType) {
    const user = await API.getUser(username);
    
    if (!user) {
        return { success: false, message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    const allOrders = await API.getOrders();
    const order = allOrders.find(o => o.id === orderId && o.username === username);
    
    if (!order) {
        return { success: false, message: '–û—Ä–¥–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' };
    }
    
    if (order.status !== 'active') {
        return { success: false, message: '–û—Ä–¥–µ—Ä –≤–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π!' };
    }
    
    // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ –∫–æ—à—Ç–∏
    if (order.type === 'buy') {
        const totalCost = order.coins * order.pricePerCoin;
        await API.updateUser(username, {
            coins: user.coins,
            usd: user.usd + totalCost,
            frozenCoins: user.frozenCoins || 0,
            frozenUSD: (user.frozenUSD || 0) - totalCost,
            isAdmin: user.isAdmin
        });
    } else {
        await API.updateUser(username, {
            coins: user.coins + order.coins,
            usd: user.usd,
            frozenCoins: (user.frozenCoins || 0) - order.coins,
            frozenUSD: user.frozenUSD || 0,
            isAdmin: user.isAdmin
        });
    }
    
    // –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Ä–¥–µ—Ä —á–µ—Ä–µ–∑ API
    await API.deleteOrder(orderId);
    
    return {
        success: true,
        message: '‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!'
    };
}

// –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –æ—Ä–¥–µ—Ä–∏ —Ç–∞ –≤–∏–∫–æ–Ω–∞—Ç–∏ —ó—Ö
async function tryMatchOrders() {
    const allOrders = await API.getOrders();
    
    // –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –æ—Ä–¥–µ—Ä–∏ –Ω–∞ –∫—É–ø—ñ–≤–ª—é —Ç–∞ –ø—Ä–æ–¥–∞–∂
    const buyOrders = allOrders.filter(o => o.type === 'buy' && o.status === 'active');
    const sellOrders = allOrders.filter(o => o.type === 'sell' && o.status === 'active');
    
    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: –∫—É–ø—ñ–≤–ª—è –≤—ñ–¥ –Ω–∞–π–≤–∏—â–æ—ó —Ü—ñ–Ω–∏, –ø—Ä–æ–¥–∞–∂ –≤—ñ–¥ –Ω–∞–π–Ω–∏–∂—á–æ—ó
    buyOrders.sort((a, b) => b.pricePerCoin - a.pricePerCoin);
    sellOrders.sort((a, b) => a.pricePerCoin - b.pricePerCoin);
    
    let matched = false;
    
    for (let i = 0; i < buyOrders.length; i++) {
        for (let j = 0; j < sellOrders.length; j++) {
            const buyOrder = buyOrders[i];
            const sellOrder = sellOrders[j];
            
            if (buyOrder.status !== 'active' || sellOrder.status !== 'active') continue;
            if (buyOrder.username === sellOrder.username) continue;
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ >= —Ü—ñ–Ω–∏ –ø—Ä–æ–¥–∞–∂—É
            if (buyOrder.pricePerCoin >= sellOrder.pricePerCoin) {
                // –í–∏–∫–æ–Ω–∞–Ω–Ω—è —É–≥–æ–¥–∏
                const buyer = await API.getUser(buyOrder.username);
                const seller = await API.getUser(sellOrder.username);
                
                if (!buyer || !seller) continue;
                
                // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
                const executionPrice = sellOrder.pricePerCoin;
                const coinsToTrade = Math.min(buyOrder.coins, sellOrder.coins);
                const tradeCost = coinsToTrade * executionPrice;
                
                // –ö–æ–º—ñ—Å—ñ—è 0.3% –≤—ñ–¥ —É–≥–æ–¥–∏
                const fee = tradeCost * 0.003;
                
                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤
                await API.updateUser(buyOrder.username, {
                    coins: buyer.coins + coinsToTrade,
                    usd: buyer.usd,
                    frozenCoins: buyer.frozenCoins || 0,
                    frozenUSD: (buyer.frozenUSD || 0) - tradeCost,
                    isAdmin: buyer.isAdmin
                });
                
                await API.updateUser(sellOrder.username, {
                    coins: seller.coins,
                    usd: seller.usd + (tradeCost - fee),
                    frozenCoins: (seller.frozenCoins || 0) - coinsToTrade,
                    frozenUSD: seller.frozenUSD || 0,
                    isAdmin: seller.isAdmin
                });
                
                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤
                buyOrder.coins -= coinsToTrade;
                sellOrder.coins -= coinsToTrade;
                
                if (buyOrder.coins <= 0) {
                    await API.deleteOrder(buyOrder.id);
                    buyOrder.status = 'completed';
                }
                if (sellOrder.coins <= 0) {
                    await API.deleteOrder(sellOrder.id);
                    sellOrder.status = 'completed';
                }
                
                // –ó–∞–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
                await logTransaction({
                    type: 'market_trade',
                    fromUser: sellOrder.username,
                    toUser: buyOrder.username,
                    coins: coinsToTrade,
                    usd: tradeCost,
                    fee: fee,
                    description: `–†–∏–Ω–∫–æ–≤–∞ —É–≥–æ–¥–∞: ${coinsToTrade.toFixed(2)} OBUHOV –ø–æ $${executionPrice.toFixed(2)}\n–ü—Ä–æ–¥–∞–≤–µ—Ü—å: ${sellOrder.username}\n–ü–æ–∫—É–ø–µ—Ü—å: ${buyOrder.username}`
                });
                
                matched = true;
            }
        }
    }
    
    return matched;
}

// –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
async function logTransaction(transaction) {
    await API.addTransaction(transaction);
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function getUserTransactions(username, limit = 50) {
    const allTransactions = await API.getTransactions();
    
    return allTransactions.filter(t => 
        t.fromUser === username || 
        t.toUser === username
    ).slice(0, limit);
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–¥–ª—è –∞–¥–º—ñ–Ω–∞)
async function getAllTransactions(limit = 100) {
    const transactions = await API.getTransactions();
    return transactions.slice(0, limit);
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function getUserOrders(username) {
    const allOrders = await API.getOrders();
    
    return {
        buy: allOrders.filter(o => o.username === username && o.type === 'buy' && o.status === 'active'),
        sell: allOrders.filter(o => o.username === username && o.type === 'sell' && o.status === 'active')
    };
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤ –Ω–∞ —Ä–∏–Ω–∫—É
async function getMarketOrders() {
    const allOrders = await API.getOrders();
    
    return {
        buy: allOrders.filter(o => o.type === 'buy' && o.status === 'active'),
        sell: allOrders.filter(o => o.type === 'sell' && o.status === 'active')
    };
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
if (typeof document !== 'undefined') {
    document.addEventListener('DOMContentLoaded', () => {
        initializeCurrency();
    });
}
