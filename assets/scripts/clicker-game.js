// –ö–ª—ñ–∫–µ—Ä –≥—Ä–∞ –¥–ª—è Obuhov Coin
let gameState = {
    coins: 0,
    clickPower: 0.001, // –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ 0.001 OBUHOV –∑–∞ –∫–ª—ñ–∫ (1000 –∫–ª—ñ–∫—ñ–≤ = 1 –º–æ–Ω–µ—Ç–∞)
    progressToNextCoin: 0,
    clicksNeeded: 1000, // 1000 –∫–ª—ñ–∫—ñ–≤ –¥–ª—è 1 –ø–æ–≤–Ω–æ—ó –º–æ–Ω–µ—Ç–∏
    totalClicks: 0,
    multiplier: 1,
    autoClickers: 0,
    lastClickTime: 0, // –î–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –∫–ª—ñ–∫–∞–º–∏
    clickCooldown: 250, // 250 –º—Å –∑–∞—Ç—Ä–∏–º–∫–∞
    autoClickerPrice: 100, // –¶—ñ–Ω–∞ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞
    upgrades: {
        clickPower: 1,
        autoClicker: 0,
        multiplier: 1
    }
};

// –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
let coinsDisplay, balanceDisplay, progressBar, clickerButton, statusDesc, totalClicksDisplay, clickPowerDisplay;
let userNameDisplay, userStatusDisplay, profileBalanceDisplay, profileUsdDisplay, cooldownBar, cooldownText, progressText;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏
document.addEventListener('DOMContentLoaded', async () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    const isAuthorized = await requireAuth();
    if (!isAuthorized) return;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    initializeElements();
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await loadUserData();
    
    // –ó–∞–ø—É—Å–∫ –≥—Ä–∏
    startGame();
    
    // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    setInterval(saveGameProgress, 5000);
    
    // –ê–≤—Ç–æ-–∫–ª—ñ–∫–µ—Ä–∏ –∫–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
    setInterval(autoClick, 5);
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
    setInterval(loadExchangeRate, 60000);
});

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM
function initializeElements() {
    coinsDisplay = document.getElementById('user-coins');
    balanceDisplay = document.getElementById('balance');
    progressBar = document.getElementById('clicker-progress');
    clickerButton = document.getElementById('clicker-component');
    statusDesc = document.getElementById('status-desc');
    totalClicksDisplay = document.getElementById('total-clicks');
    clickPowerDisplay = document.getElementById('click-power');
    
    // –ù–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –ø–∞–Ω–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    userNameDisplay = document.getElementById('user-name');
    userStatusDisplay = document.getElementById('user-status');
    profileBalanceDisplay = document.getElementById('profile-balance');
    profileUsdDisplay = document.getElementById('profile-usd');
    currentRateDisplay = document.getElementById('current-rate');
    cooldownBar = document.getElementById('cooldown-bar');
    cooldownText = document.querySelector('.cooldown-text');
    progressText = document.getElementById('progress-text');
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
    if (clickerButton) {
        clickerButton.addEventListener('click', handleClick);
    }
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
    if (statusDesc) {
        statusDesc.addEventListener('click', updateBalanceFromProfile);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadUserData() {
    try {
        const user = await getCurrentUser();
        if (!user) {
            window.location.href = 'index.html';
            return;
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å
        if (balanceDisplay) {
            balanceDisplay.textContent = (user.coins || 0).toFixed(2);
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–Ω–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        updateUserInfoPanel(user);
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—É—Ä—Å –≤–∞–ª—é—Ç–∏
        await loadExchangeRate();
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å –≥—Ä–∏
        loadGameProgress();
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function updateUserInfoPanel(user) {
    if (userNameDisplay) {
        userNameDisplay.textContent = user.username;
    }
    
    if (userStatusDisplay) {
        if (user.isAdmin) {
            userStatusDisplay.textContent = 'üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä';
            userStatusDisplay.style.color = '#ffd700';
        } else {
            userStatusDisplay.textContent = 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
            userStatusDisplay.style.color = '#ccc';
        }
    }
    
    if (profileBalanceDisplay) {
        profileBalanceDisplay.textContent = (user.coins || 0).toFixed(2);
    }
    
    if (profileUsdDisplay) {
        profileUsdDisplay.textContent = '$' + (user.usd || 0).toFixed(2);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—É –≤–∞–ª—é—Ç–∏
async function loadExchangeRate() {
    try {
        if (currentRateDisplay) {
            const rate = await API.getExchangeRate();
            currentRateDisplay.textContent = '$' + rate.toFixed(2);
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—É:', error);
        if (currentRateDisplay) {
            currentRateDisplay.textContent = '$2.65';
        }
    }
}

// –ó–∞–ø—É—Å–∫ –≥—Ä–∏
function startGame() {
    updateDisplay();
    updateAutoClickerButton();
    
    // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é idle –¥–ª—è –∫–Ω–æ–ø–∫–∏
    if (clickerButton) {
        clickerButton.classList.add('clicker-idle');
    }
}

// –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É
function handleClick(event) {
    const currentTime = Date.now();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –∫–ª—ñ–∫–∞–º–∏
    if (currentTime - gameState.lastClickTime < gameState.clickCooldown) {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
        showCooldownMessage(event);
        return;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–ª—ñ–∫—É
    gameState.lastClickTime = currentTime;
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞—Ç—Ä–∏–º–∫–∏ —Ç–∞ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å
    startCooldownIndicator();
    makeClickerTransparent();
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∫–ª—ñ–∫—É
    animateClick(event);
    
    // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å (0.1 OBUHOV –∑–∞ –∫–ª—ñ–∫)
    const earnedAmount = gameState.clickPower * gameState.multiplier;
    gameState.progressToNextCoin += earnedAmount;
    gameState.totalClicks++;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–≤–Ω–∞ –º–æ–Ω–µ—Ç–∞
    if (gameState.progressToNextCoin >= 1) {
        const fullCoins = Math.floor(gameState.progressToNextCoin);
        gameState.coins += fullCoins;
        gameState.progressToNextCoin -= fullCoins;
        
        // –ï—Ñ–µ–∫—Ç –∑–∞—Ä–æ–±—ñ—Ç–∫—É –ø–æ–≤–Ω–æ—ó –º–æ–Ω–µ—Ç–∏
        if (fullCoins > 0) {
            showCoinEarnedEffect(fullCoins);
        }
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    updateDisplay();
    
    // –ï—Ñ–µ–∫—Ç–∏ –∫–ª—ñ–∫—É –∑ –º—ñ—Å—Ü—è –∫–ª—ñ–∫—É
    createClickEffect(event, earnedAmount);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
    saveGameProgress();
}

// –ó–∞—Ä–æ–±–ª—è—î–º–æ –º–æ–Ω–µ—Ç—É (–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏)
function earnCoin() {
    // –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–≤—Ç–æ-–∫–ª—ñ–∫—ñ–≤
    gameState.progressToNextCoin += gameState.clickPower * gameState.multiplier * 0.5;
    
    if (gameState.progressToNextCoin >= 1) {
        const fullCoins = Math.floor(gameState.progressToNextCoin);
        gameState.coins += fullCoins;
        gameState.progressToNextCoin -= fullCoins;
        
        if (fullCoins > 0) {
            showCoinEarnedEffect(fullCoins);
        }
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å
    saveGameProgress();
}

// –ê–≤—Ç–æ-–∫–ª—ñ–∫
function autoClick() {
    if (gameState.autoClickers > 0) {
        const earnedAmount = gameState.autoClickers * gameState.multiplier * 0.05; // –ú–µ–Ω—à–µ –Ω—ñ–∂ —Ä—É—á–Ω–∏–π –∫–ª—ñ–∫
        gameState.progressToNextCoin += earnedAmount;
        
        if (gameState.progressToNextCoin >= 1) {
            const fullCoins = Math.floor(gameState.progressToNextCoin);
            gameState.coins += fullCoins;
            gameState.progressToNextCoin -= fullCoins;
        }
        
        updateDisplay();
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function updateDisplay() {
    if (coinsDisplay) {
        coinsDisplay.textContent = `${gameState.coins.toFixed(3)} OBUHOV`;
    }
    
    if (progressBar) {
        // –ü—Ä–æ–≥—Ä–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–æ–≤–Ω–æ—ó –º–æ–Ω–µ—Ç–∏ (–≤—ñ–¥ 0 –¥–æ 1000 –∫–ª—ñ–∫—ñ–≤)
        const progressPercent = (gameState.progressToNextCoin * 1000) % 1000 / 10; // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ –≤—ñ–¥—Å–æ—Ç–∫–∏
        progressBar.value = progressPercent;
        progressBar.max = 100;
    }
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≤ –∫–ª—ñ–∫–∞—Ö —Ç–∞ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö
    if (progressText) {
        const clicksToNext = Math.ceil((1 - (gameState.progressToNextCoin % 1)) * 1000);
        const progressPercent = ((gameState.progressToNextCoin % 1) * 100).toFixed(1);
        progressText.textContent = `–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –º–æ–Ω–µ—Ç–∏: ${clicksToNext} –∫–ª—ñ–∫—ñ–≤ (${progressPercent}%)`;
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (totalClicksDisplay) {
        totalClicksDisplay.textContent = gameState.totalClicks;
    }
    
    if (clickPowerDisplay) {
        clickPowerDisplay.textContent = (gameState.clickPower * gameState.multiplier * 1000).toFixed(1);
    }
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è –∫–ª—ñ–∫—É
function animateClick(event) {
    if (!clickerButton) return;
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è —Å—Ç–∏—Å–Ω–µ–Ω–Ω—è
    clickerButton.style.transform = 'scale(0.95)';
    
    setTimeout(() => {
        clickerButton.style.transform = 'scale(1)';
    }, 100);
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø—É–ª—å—Å–∞—Ü—ñ—ó
    clickerButton.classList.add('clicker-pulse');
    setTimeout(() => {
        clickerButton.classList.remove('clicker-pulse');
    }, 300);
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É –∫–ª—ñ–∫—É
function createClickEffect(event, earnedAmount) {
    const effect = document.createElement('div');
    effect.className = 'click-effect';
    effect.textContent = `+${(earnedAmount * 1000).toFixed(1)}`; // –ü–æ–∫–∞–∑—É—î–º–æ –≤ —Ç–∏—Å—è—á–Ω–∏—Ö
    
    // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–ª—ñ–∫—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    effect.style.position = 'fixed';
    effect.style.left = `${event.clientX}px`;
    effect.style.top = `${event.clientY}px`;
    effect.style.transform = 'translate(-50%, -50%)';
    effect.style.pointerEvents = 'none';
    effect.style.zIndex = '10000';
    
    document.body.appendChild(effect);
    
    // –í–∏–¥–∞–ª—è—î–º–æ –µ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        if (effect.parentElement) {
            effect.parentElement.removeChild(effect);
        }
    }, 250);
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞—Ç—Ä–∏–º–∫—É
function showCooldownMessage(event) {
    const message = document.createElement('div');
    message.className = 'cooldown-message';
    message.textContent = '–ó–∞—á–µ–∫–∞–π—Ç–µ...';
    
    // –ü–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ—Å–Ω–æ –∫–ª—ñ–∫—É
    message.style.position = 'fixed';
    message.style.left = `${event.clientX}px`;
    message.style.top = `${event.clientY}px`;
    message.style.transform = 'translate(-50%, -50%)';
    message.style.pointerEvents = 'none';
    message.style.zIndex = '10001';
    
    document.body.appendChild(message);
    
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        if (message.parentElement) {
            message.parentElement.removeChild(message);
        }
    }, 1000);
}

// –ó–∞–ø—É—Å–∫ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞—Ç—Ä–∏–º–∫–∏
function startCooldownIndicator() {
    if (cooldownBar && cooldownText) {
        cooldownBar.classList.add('active');
        cooldownText.textContent = '–ó–∞—á–µ–∫–∞–π—Ç–µ...';
        
        setTimeout(() => {
            cooldownBar.classList.remove('active');
            cooldownText.textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ –∫–ª—ñ–∫—É';
        }, gameState.clickCooldown);
    }
}

// –†–æ–±–∏—Ç—å –∫–ª—ñ–∫–µ—Ä –ø—Ä–æ–∑–æ—Ä–∏–º –ø—ñ–¥ —á–∞—Å –∫—É–ª–¥–∞—É–Ω—É
function makeClickerTransparent() {
    if (clickerButton) {
        clickerButton.classList.add('cooldown-transparent');
        
        setTimeout(() => {
            clickerButton.classList.remove('cooldown-transparent');
        }, gameState.clickCooldown);
    }
}

// –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞
async function buyAutoClicker() {
    const user = await getCurrentUser();
    if (!user) {
        alert('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
        return;
    }
    
    if (user.coins < gameState.autoClickerPrice) {
        alert(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ü–æ—Ç—Ä—ñ–±–Ω–æ ${gameState.autoClickerPrice} OBUHOV`);
        return;
    }
    
    try {
        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const updatedUserData = {
            ...user,
            coins: user.coins - gameState.autoClickerPrice
        };
        
        const result = await API.updateUser(user.username, updatedUserData);
        
        if (result.success) {
            // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä
            gameState.autoClickers++;
            gameState.autoClickerPrice = Math.floor(gameState.autoClickerPrice * 1.5); // –ó–±—ñ–ª—å—à—É—î–º–æ —Ü—ñ–Ω—É
            
            // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            await API.addTransaction({
                type: 'clicker_purchase',
                description: `–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞`,
                fromUser: user.username,
                toUser: 'clicker',
                coins: gameState.autoClickerPrice / 1.5,
                usd: 0,
                fee: 0,
                timestamp: new Date().toISOString()
            });
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
            saveGameProgress();
            updateDisplay();
            updateAutoClickerButton();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            await updateBalanceFromProfile();
            
            alert(`‚úÖ –ö—É–ø–ª–µ–Ω–æ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä! –¢–µ–ø–µ—Ä —É –≤–∞—Å ${gameState.autoClickers} –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä—ñ–≤`);
            
        } else {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏: ' + (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞!');
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∞
function updateAutoClickerButton() {
    const autoClickerBtn = document.getElementById('auto-clicker-btn');
    const autoClickerCount = document.getElementById('auto-clicker-count');
    
    if (autoClickerBtn) {
        autoClickerBtn.textContent = `ü§ñ –ö—É–ø–∏—Ç–∏ –∞–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä (${gameState.autoClickerPrice} OBUHOV)`;
    }
    
    if (autoClickerCount) {
        autoClickerCount.textContent = `–ê–≤—Ç–æ–∫–ª—ñ–∫–µ—Ä–∏: ${gameState.autoClickers}`;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –µ—Ñ–µ–∫—Ç –∑–∞—Ä–æ–±–ª–µ–Ω–æ—ó –º–æ–Ω–µ—Ç–∏
function showCoinEarnedEffect(coinsEarned = 1) {
    const effect = document.createElement('div');
    effect.className = 'coin-earned-effect';
    effect.textContent = `+${coinsEarned} OBUHOV`;
    
    if (clickerButton && clickerButton.parentElement) {
        effect.style.position = 'absolute';
        effect.style.top = '-30px';
        effect.style.left = '50%';
        effect.style.transform = 'translateX(-50%)';
        
        clickerButton.parentElement.appendChild(effect);
        
        setTimeout(() => {
            if (effect.parentElement) {
                effect.parentElement.removeChild(effect);
            }
        }, 2000);
    }
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –∑ –ø—Ä–æ—Ñ—ñ–ª—é
async function updateBalanceFromProfile() {
    try {
        const user = await getCurrentUser();
        if (user) {
            if (balanceDisplay) {
                balanceDisplay.textContent = (user.coins || 0).toFixed(2);
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–Ω–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            updateUserInfoPanel(user);
        }
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if (statusDesc) {
            const originalText = statusDesc.textContent;
            statusDesc.textContent = '–û–Ω–æ–≤–ª–µ–Ω–æ!';
            statusDesc.style.color = '#14e21b';
            
            setTimeout(() => {
                statusDesc.textContent = originalText;
                statusDesc.style.color = '';
            }, 2000);
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
        
        if (statusDesc) {
            const originalText = statusDesc.textContent;
            statusDesc.textContent = '–ü–æ–º–∏–ª–∫–∞!';
            statusDesc.style.color = '#ff4444';
            
            setTimeout(() => {
                statusDesc.textContent = originalText;
                statusDesc.style.color = '';
            }, 2000);
        }
    }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≥—Ä–∏
function saveGameProgress() {
    try {
        localStorage.setItem('obuhov-clicker-game', JSON.stringify(gameState));
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∏:', error);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≥—Ä–∏
function loadGameProgress() {
    try {
        const saved = localStorage.getItem('obuhov-clicker-game');
        if (saved) {
            const savedState = JSON.parse(saved);
            gameState = { ...gameState, ...savedState };
        }
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä–∏:', error);
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–ø–≥—Ä–µ–π–¥—ñ–≤ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É)
function buyUpgrade(type) {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∞–ø–≥—Ä–µ–π–¥—ñ–≤
    console.log(`–ü–æ–∫—É–ø–∫–∞ –∞–ø–≥—Ä–µ–π–¥—É: ${type}`);
}

// –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –º–æ–Ω–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å
async function transferCoinsToAccount() {
    if (gameState.coins <= 0) {
        alert('‚ùå –ù–µ–º–∞—î –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å—É!');
        return;
    }
    
    try {
        const user = await getCurrentUser();
        if (!user) {
            alert('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
            return;
        }
        
        const coinsToTransfer = gameState.coins;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ API
        const updatedUserData = {
            ...user,
            coins: (user.coins || 0) + coinsToTransfer
        };
        
        const result = await API.updateUser(user.username, updatedUserData);
        
        if (result.success) {
            // –î–æ–¥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
            await API.addTransaction({
                type: 'clicker_earning',
                description: `–ó–∞—Ä–æ–±—ñ—Ç–æ–∫ –∑ –∫–ª—ñ–∫–µ—Ä–∞: ${coinsToTransfer.toFixed(2)} OBUHOV`,
                fromUser: 'clicker',
                toUser: user.username,
                coins: coinsToTransfer,
                usd: 0,
                fee: 0,
                timestamp: new Date().toISOString()
            });
            
            // –°–∫–∏–¥–∞—î–º–æ –º–æ–Ω–µ—Ç–∏ –≤ –≥—Ä—ñ
            gameState.coins = 0;
            
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
            saveGameProgress();
            updateDisplay();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
            await updateBalanceFromProfile();
            
            alert(`‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${coinsToTransfer.toFixed(2)} OBUHOV –Ω–∞ –≤–∞—à —Ä–∞—Ö—É–Ω–æ–∫!`);
            
        } else {
            alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å—É –º–æ–Ω–µ—Ç: ' + (result.error || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'));
        }
        
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å—É –º–æ–Ω–µ—Ç:', error);
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å—É –º–æ–Ω–µ—Ç!');
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ HTML
window.transferCoinsToAccount = transferCoinsToAccount;
window.buyUpgrade = buyUpgrade;
window.buyAutoClicker = buyAutoClicker;
