// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é

document.addEventListener('DOMContentLoaded', async () => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    const isAuthorized = await requireAuth();
    if (!isAuthorized) return;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é
    await loadProfileData();
    await loadTransactions();
    await loadMyOrders();
    await loadMarketOrders();
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
        await loadMyOrders();
        await loadMarketOrders();
    }, 5000);
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é
async function loadProfileData() {
    const user = await getCurrentUser();
    
    if (!user) {
        window.location.href = 'index.html';
        return;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const usernameElement = document.getElementById('username');
    if (usernameElement) {
        usernameElement.textContent = user.username;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—ñ–≤
    const balanceCoinsElement = document.getElementById('balance-coins');
    const balanceUsdElement = document.getElementById('balance-usd');
    const frozenCoinsElement = document.getElementById('frozen-coins');
    const frozenUsdElement = document.getElementById('frozen-usd');
    
    if (balanceCoinsElement) {
        balanceCoinsElement.textContent = (user.coins || 0).toFixed(2);
    }
    
    if (balanceUsdElement) {
        balanceUsdElement.textContent = '$' + (user.usd || 0).toFixed(2);
    }
    
    if (frozenCoinsElement && user.frozenCoins > 0) {
        frozenCoinsElement.textContent = `(üîí ${user.frozenCoins.toFixed(2)})`;
        frozenCoinsElement.style.display = 'block';
    }
    
    if (frozenUsdElement && user.frozenUSD > 0) {
        frozenUsdElement.textContent = `(üîí $${user.frozenUSD.toFixed(2)})`;
        frozenUsdElement.style.display = 'block';
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É—Ä—Å—É
    const rateElement = document.getElementById('current-rate');
    if (rateElement) {
        const rate = await getExchangeRate();
        rateElement.textContent = '$' + rate.toFixed(2);
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const memberSinceElement = document.getElementById('member-since');
    const registrationDateElement = document.getElementById('registration-date');
    
    if (user.registeredAt) {
        const date = new Date(user.registeredAt);
        const formattedDate = formatDate(date);
        const shortDate = formatShortDate(date);
        
        if (memberSinceElement) {
            memberSinceElement.textContent = formattedDate;
        }
        
        if (registrationDateElement) {
            registrationDateElement.textContent = shortDate;
        }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
    const transactionsElement = document.getElementById('total-transactions');
    if (transactionsElement) {
        const userTransactions = await getUserTransactions(user.username);
        transactionsElement.textContent = userTransactions.length;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    const statusElement = document.getElementById('account-status');
    if (statusElement) {
        if (user.isAdmin) {
            statusElement.textContent = '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä';
            statusElement.style.color = '#ffd700';
        } else {
            statusElement.textContent = '–ê–∫—Ç–∏–≤–Ω–∏–π';
        }
    }
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ç–∞–±—ñ–≤
function switchTab(tabName) {
    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ç–∞–±—ñ–≤
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ç–∞–±—É
    event.target.classList.add('active');
    document.getElementById('tab-' + tabName).classList.add('active');
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–∞–±–∞
    if (tabName === 'market') {
        loadMyOrders();
        loadMarketOrders();
    } else if (tabName === 'history') {
        loadTransactions();
    }
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—É–ø—ñ–≤–ª—ñ
async function calculateBuy() {
    const usdAmount = parseFloat(document.getElementById('buy-usd').value) || 0;
    const rate = await getExchangeRate();
    const coins = usdAmount / rate;
    const fee = coins * 0.005;
    const result = coins - fee;
    
    document.getElementById('buy-coins-result').value = result.toFixed(4);
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂—É
async function calculateSell() {
    const coins = parseFloat(document.getElementById('sell-coins').value) || 0;
    const rate = await getExchangeRate();
    const usd = coins * rate;
    const fee = usd * 0.005;
    const result = usd - fee;
    
    document.getElementById('sell-usd-result').value = result.toFixed(2);
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ
async function executeBuy() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const usdAmount = parseFloat(document.getElementById('buy-usd').value);
    
    if (!usdAmount || usdAmount <= 0) {
        notify.error('‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É!');
        return;
    }
    
    const result = await buyCoins(user.username, usdAmount);
    
    if (result.success) {
        notify.success(result.message);
        document.getElementById('buy-usd').value = '';
        document.getElementById('buy-coins-result').value = '';
        await loadProfileData();
    } else {
        notify.error('‚ùå ' + result.message);
    }
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
async function executeSell() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const coinsAmount = parseFloat(document.getElementById('sell-coins').value);
    
    if (!coinsAmount || coinsAmount <= 0) {
        notify.error('‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å!');
        return;
    }
    
    const result = await sellCoins(user.username, coinsAmount);
    
    if (result.success) {
        notify.success(result.message);
        document.getElementById('sell-coins').value = '';
        document.getElementById('sell-usd-result').value = '';
        await loadProfileData();
    } else {
        notify.error('‚ùå ' + result.message);
    }
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤–∞—Ä—Ç–æ—Å—Ç—ñ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∫—É–ø—ñ–≤–ª—é
document.addEventListener('DOMContentLoaded', () => {
    const buyCoinsInput = document.getElementById('order-buy-coins');
    const buyPriceInput = document.getElementById('order-buy-price');
    
    if (buyCoinsInput && buyPriceInput) {
        [buyCoinsInput, buyPriceInput].forEach(input => {
            input.addEventListener('input', () => {
                const coins = parseFloat(buyCoinsInput.value) || 0;
                const price = parseFloat(buyPriceInput.value) || 0;
                document.getElementById('buy-total').textContent = (coins * price).toFixed(2);
            });
        });
    }
    
    const sellCoinsInput = document.getElementById('order-sell-coins');
    const sellPriceInput = document.getElementById('order-sell-price');
    
    if (sellCoinsInput && sellPriceInput) {
        [sellCoinsInput, sellPriceInput].forEach(input => {
            input.addEventListener('input', () => {
                const coins = parseFloat(sellCoinsInput.value) || 0;
                const price = parseFloat(sellPriceInput.value) || 0;
                document.getElementById('sell-total').textContent = (coins * price).toFixed(2);
            });
        });
    }
    
    const transferInput = document.getElementById('transfer-amount');
    if (transferInput) {
        transferInput.addEventListener('input', () => {
            const amount = parseFloat(transferInput.value) || 0;
            const fee = amount * 0.01;
            const received = amount - fee;
            document.getElementById('transfer-received').textContent = received.toFixed(2);
        });
    }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∫—É–ø—ñ–≤–ª—é
async function createBuyOrderUI() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const coins = parseFloat(document.getElementById('order-buy-coins').value);
    const price = parseFloat(document.getElementById('order-buy-price').value);
    
    if (!coins || coins <= 0 || !price || price <= 0) {
        notify.error('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ!');
        return;
    }
    
    const result = await createBuyOrder(user.username, coins, price);
    
    if (result.success) {
        notify.success(result.message);
        document.getElementById('order-buy-coins').value = '';
        document.getElementById('order-buy-price').value = '';
        document.getElementById('buy-total').textContent = '0.00';
        await loadProfileData();
        await loadMyOrders();
        await loadMarketOrders();
    } else {
        notify.error('‚ùå ' + result.message);
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂
async function createSellOrderUI() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const coins = parseFloat(document.getElementById('order-sell-coins').value);
    const price = parseFloat(document.getElementById('order-sell-price').value);
    
    if (!coins || coins <= 0 || !price || price <= 0) {
        notify.error('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ!');
        return;
    }
    
    const result = await createSellOrder(user.username, coins, price);
    
    if (result.success) {
        notify.success(result.message);
        document.getElementById('order-sell-coins').value = '';
        document.getElementById('order-sell-price').value = '';
        document.getElementById('sell-total').textContent = '0.00';
        await loadProfileData();
        await loadMyOrders();
        await loadMarketOrders();
    } else {
        notify.error('‚ùå ' + result.message);
    }
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–∞–∑—É
async function executeTransfer() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const to = document.getElementById('transfer-to').value.trim();
    const amount = parseFloat(document.getElementById('transfer-amount').value);
    const note = document.getElementById('transfer-note').value.trim();
    
    if (!to || !amount || amount <= 0) {
        notify.error('‚ùå –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è!');
        return;
    }
    
    const result = await transferCoins(user.username, to, amount, note);
    
    if (result.success) {
        notify.success(result.message);
        document.getElementById('transfer-to').value = '';
        document.getElementById('transfer-amount').value = '';
        document.getElementById('transfer-note').value = '';
        document.getElementById('transfer-received').textContent = '0.00';
        await loadProfileData();
        await loadTransactions();
    } else {
        notify.error('‚ùå ' + result.message);
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ—ó—Ö –æ—Ä–¥–µ—Ä—ñ–≤
async function loadMyOrders() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const orders = await getUserOrders(user.username);
    const container = document.getElementById('my-orders-list');
    
    if (!container) return;
    
    if (orders.buy.length === 0 && orders.sell.length === 0) {
        container.innerHTML = '<p class="no-data">–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤</p>';
        return;
    }
    
    let html = '';
    
    orders.buy.forEach(order => {
        const totalCost = order.coins * order.pricePerCoin;
        html += `
            <div class="order-item buy">
                <div class="order-info">
                    <span class="order-type">üìà –ö—É–ø—ñ–≤–ª—è</span>
                    <span>${order.coins.toFixed(2)} OBUHOV –ø–æ $${order.pricePerCoin.toFixed(2)}</span>
                </div>
                <div class="order-actions">
                    <span class="order-total">$${totalCost.toFixed(2)}</span>
                    <button class="btn-cancel" onclick="cancelOrderUI('${order.id}', 'buy')">‚ùå</button>
                </div>
            </div>
        `;
    });
    
    orders.sell.forEach(order => {
        const totalCost = order.coins * order.pricePerCoin;
        html += `
            <div class="order-item sell">
                <div class="order-info">
                    <span class="order-type">üìâ –ü—Ä–æ–¥–∞–∂</span>
                    <span>${order.coins.toFixed(2)} OBUHOV –ø–æ $${order.pricePerCoin.toFixed(2)}</span>
                </div>
                <div class="order-actions">
                    <span class="order-total">$${totalCost.toFixed(2)}</span>
                    <button class="btn-cancel" onclick="cancelOrderUI('${order.id}', 'sell')">‚ùå</button>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞
async function cancelOrderUI(orderId, type) {
    const user = await getCurrentUser();
    if (!user) return;
    
    notify.confirm('–°–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ–π –æ—Ä–¥–µ—Ä?', async () => {
        const result = await cancelOrder(user.username, orderId, type);
        
        if (result.success) {
            notify.success(result.message);
            await loadProfileData();
            await loadMyOrders();
            await loadMarketOrders();
        } else {
            notify.error('‚ùå ' + result.message);
        }
    });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –æ—Ä–¥–µ—Ä—ñ–≤
async function loadMarketOrders() {
    const orders = await getMarketOrders();
    
    const buyContainer = document.getElementById('market-buy-orders');
    const sellContainer = document.getElementById('market-sell-orders');
    
    if (!buyContainer || !sellContainer) return;
    
    // –û—Ä–¥–µ—Ä–∏ –Ω–∞ –∫—É–ø—ñ–≤–ª—é (–≤—ñ–¥ –Ω–∞–π–≤–∏—â–æ—ó —Ü—ñ–Ω–∏)
    const buyOrders = [...orders.buy].sort((a, b) => b.pricePerCoin - a.pricePerCoin).slice(0, 10);
    
    if (buyOrders.length === 0) {
        buyContainer.innerHTML = '<p class="no-data">–ù–µ–º–∞—î –æ—Ä–¥–µ—Ä—ñ–≤</p>';
    } else {
        let html = '';
        buyOrders.forEach(order => {
            html += `
                <div class="market-order-item">
                    <span class="order-price">$${order.pricePerCoin.toFixed(2)}</span>
                    <span class="order-amount">${order.coins.toFixed(2)}</span>
                </div>
            `;
        });
        buyContainer.innerHTML = html;
    }
    
    // –û—Ä–¥–µ—Ä–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂ (–≤—ñ–¥ –Ω–∞–π–Ω–∏–∂—á–æ—ó —Ü—ñ–Ω–∏)
    const sellOrders = [...orders.sell].sort((a, b) => a.pricePerCoin - b.pricePerCoin).slice(0, 10);
    
    if (sellOrders.length === 0) {
        sellContainer.innerHTML = '<p class="no-data">–ù–µ–º–∞—î –æ—Ä–¥–µ—Ä—ñ–≤</p>';
    } else {
        let html = '';
        sellOrders.forEach(order => {
            html += `
                <div class="market-order-item">
                    <span class="order-price">$${order.pricePerCoin.toFixed(2)}</span>
                    <span class="order-amount">${order.coins.toFixed(2)}</span>
                </div>
            `;
        });
        sellContainer.innerHTML = html;
    }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
async function loadTransactions() {
    const user = await getCurrentUser();
    if (!user) return;
    
    const transactions = await getUserTransactions(user.username, 50);
    const container = document.getElementById('transactions-list');
    
    if (!container) return;
    
    if (transactions.length === 0) {
        container.innerHTML = '<p class="no-data">–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è</p>';
        return;
    }
    
    let html = '';
    
    transactions.forEach(tx => {
        const date = new Date(tx.timestamp);
        const timeStr = date.toLocaleString('uk-UA');
        
        let icon = 'üí±';
        let title = tx.description || '–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è';
        let details = '';
        
        if (tx.type === 'transfer') {
            icon = 'üí∏';
            if (tx.fromUser === user.username) {
                details = `‚Üí ${tx.toUser} | –ö–æ–º—ñ—Å—ñ—è: ${tx.fee.toFixed(2)} OBUHOV`;
            } else {
                const received = tx.coins - tx.fee;
                details = `‚Üê ${tx.fromUser} | –û—Ç—Ä–∏–º–∞–Ω–æ: ${received.toFixed(2)} OBUHOV`;
            }
        } else if (tx.type === 'buy') {
            icon = 'üí∞';
            details = `+${tx.coins.toFixed(2)} OBUHOV | -$${tx.usd.toFixed(2)}`;
        } else if (tx.type === 'sell') {
            icon = 'üíµ';
            details = `-${tx.coins.toFixed(2)} OBUHOV | +$${tx.usd.toFixed(2)}`;
        } else if (tx.type === 'market_trade') {
            icon = 'ü§ù';
            if (tx.toUser === user.username) {
                details = `–ö—É–ø—ñ–≤–ª—è –≤—ñ–¥ ${tx.fromUser} | +${tx.coins.toFixed(2)} OBUHOV`;
            } else {
                details = `–ü—Ä–æ–¥–∞–∂ –¥–æ ${tx.toUser} | +$${(tx.usd - tx.fee).toFixed(2)}`;
            }
        }
        
        html += `
            <div class="transaction-item">
                <div class="tx-icon">${icon}</div>
                <div class="tx-details">
                    <div class="tx-title">${title}</div>
                    <div class="tx-info">${details}</div>
                    <div class="tx-time">${timeStr}</div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ (–ø–æ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç)
function formatDate(date) {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return date.toLocaleDateString('uk-UA', options);
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
function formatShortDate(date) {
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}.${month}.${year}`;
}
